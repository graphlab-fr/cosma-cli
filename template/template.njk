<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="utf-8">
    <meta name="generator" content="https://github.com/hyperotlet/cosma">
    <meta name="description" content="Cosma est un logiciel de création et de visualisation
        de graphe documentaire. Il permet de générer et représenter des documents interreliés
        sous la forme d’un réseau interactif dans un navigateur web.">
    <title>Cosma - Cosmoscope</title>

    <style>
        {% include "colors.css" %}
        {% include "styles.css" %}
    </style>

    <script>
        {% include "libs/d3.js" %}
        {% include "libs/fuse.js" %}
    </script>
</head>

<body>
    <div class="wrapper">
        <aside class="index">

            <header role="banner">
                <div class="self">
                    {% include "cosmalogo.svg" %}
                    <span onclick="openRecord('credits', false)">Crédits</span>
                </div>

                <div class="alpha_bar", onclick="updateForces()">
                    <div id="alpha_value"></div>
                </div>
            </header>

            <section>
                <input class="search-bar" id="search" placeholder="Rechercher..." autocomplete="off" />
                <ul id="search-result-list"></ul>
            </section>

            <section>
                <details open="open">
                    <summary class="menu-title">Filtres ({{ types | length }})</summary>

                    <ul>
                        {% for type in types %}
                        <li class="filter t_{{ type.name }}"
                        data-filter="{{ type.nodes | join(",") }}"
                        data-name="{{ type.name }}">{{ type.name | capitalize }} ({{ type.nodes | length }})</li>
                        {% endfor %}
                    </ul>
                </details>
            </section>

            {% if tags.length !== 0 %}
            <section>
                <details data-sort="tag">
                    <summary class="menu-title">Mots-clés ({{ tags | length }})</summary>

                    <div class="toggle"></div>

                    <div class="sort active">
                        {% for tag in tags %}
                        <button onclick="unlightNodes();highlightNodes([{{ tag.nodes | join(',') }}])">
                        {{ tag.name | capitalize }} ({{ tag.nodes | length }})</button>
                        {% endfor %}
                    </div>

                    <div class="sort">
                        {% for tag in tags | reverse %}
                        <button onclick="unlightNodes();highlightNodes([{{ tag.nodes | join(',') }}])">
                        {{ tag.name | capitalize }} ({{ tag.nodes | length }})</button>
                        {% endfor %}
                    </div>
                </details>
            </section>
            {% endif %}

            <section>
                <details data-sort="record">
                    <summary class="menu-title">Index ({{ index | length }})</summary>

                    <div class="toggle"></div>

                    <ul class="sort active">
                        {% for link in index %}
                        <li title="{{ link.id }}"
                        onclick="openRecord({{ link.id }})">{{ link.title | capitalize }}</li>
                        {% endfor %}
                    </ul>

                    <ul class="sort">
                        {% for link in index | reverse %}
                        <li title="link.id"
                        onclick="openRecord({{ link.id }})">{{ link.title | capitalize }}</li>
                        {% endfor %}
                    </ul>
                </details>
            </section>

            <section>
                <details open="open">
                    <summary class="menu-title">Vues ({{ views | length }})</summary>

                    <button onclick="saveView()">Sauvegarder la vue actuelle</button>

                    {% if views.length !== 0 %}
                    <ul>
                        {% for viewName, viewString in views %}
                        <li onclick="changeView('{{ viewString }}')">{{ viewName | capitalize }}</li>
                        {% endfor %}
                    </ul>
                    {% endif %}
                </details>
            </section>

            <section class="controls">
                <details>
                    <summary class="menu-title">Paramètres du graphe</summary>

                    {% macro formHead(name, graphParameter, defaultValue, description) %}
                    <header class="control-head">
                        <label>{{ name }}</label>

                        {% if graphParameter and defaultValue == true %}
                        <input type="checkbox" onchange="graphProperties.{{ graphParameter }} = this.checked; updateForces();" checked>
                        {% elif graphParameter %}
                        <input type="checkbox" onchange="graphProperties.{{ graphParameter }} = this.checked; updateForces();">
                        {% endif %}

                        <p>{{ description }}</p>
                    </header>
                    {% endmacro %}

                    {% macro inputRange(name, graphParameter, defaultValue, min, max, description) %}
                    <form oninput="result.value = range.value; graphProperties.{{ graphParameter }} = range.value; updateForces();">
                        <label title="{{ description }}">
                            {{ name }}
                            <output class="counter" name="result">{{ defaultValue }}</output>
                        </label>
                        <input type="range" min="{{ min }}" max="{{ max }}" value="{{ defaultValue }}" name="range" step=".1" />
                    </form>
                    {% endmacro %}

                    <article>
                        {{ formHead('charge', 'charge.enabled', graphConfig.charge.enabled, 'Attracts (+) or repels (-) nodes to/from each other.') }}

                        {{ inputRange('strength', 'charge.strength', graphConfig.charge.strength, -200, 50, 'Negative strength repels nodes. Positive strength attracts nodes.') }}
                        {{ inputRange('distanceMin', 'charge.distanceMin', graphConfig.charge.distanceMin, 0, 50, 'Minimum distance where force is applied.') }}
                        {{ inputRange('distanceMax', 'charge.distanceMax', graphConfig.charge.distanceMax, 0, 2000, 'Maximum distance where force is applied.') }}
                    </article>

                    <article>
                        {{ formHead('link', 'link.enabled', graphConfig.link.enabled, 'Sets link length.') }}

                        {{ inputRange('distance', 'link.distance', graphConfig.link.distance, 0, 100, 'The force will push/pull nodes to make links this long.') }}
                        {{ inputRange('iterations', 'link.iterations', graphConfig.link.iterations, 1, 10, 'The force will push/pull nodes to make links this long.') }}
                    </article>

                    <article>
                        {{ formHead('collide', 'collide.enabled', graphConfig.collide.enabled, 'Prevents nodes from overlapping.') }}

                        {{ inputRange('strength', 'collide.strength', graphConfig.collide.strength, 0, 2, '') }}
                        {{ inputRange('radius', 'collide.radius', graphConfig.collide.radius, 1, 100, 'Size of nodes.') }}
                        {{ inputRange('radius', 'collide.iterations', graphConfig.collide.iterations, 1, 10, 'Higher values increase rigidity of the nodes (WARNING: high values are computationally expensive).') }}
                    </article>

                    <article>
                        {{ formHead('forceX', 'forceX.enabled', graphConfig.forceX.enabled, 'Acts like gravity. Pulls all points towards an X location.') }}

                        {{ inputRange('strength', 'forceX.strength', graphConfig.forceX.strength, 0, 1, '') }}
                        {{ inputRange('strength', 'forceX.x', graphConfig.forceX.x, 0, 1, 'The X location that the force will push the nodes to (NOTE: This demo multiplies by the svg width).') }}
                    </article>

                    <article>
                        {{ formHead('forceY', 'forceY.enabled', graphConfig.forceY.enabled, 'Acts like gravity. Pulls all points towards a Y location.') }}

                        {{ inputRange('strength', 'forceY.strength', graphConfig.forceY.strength, 0, 1, '') }}
                        {{ inputRange('strength', 'forceY.y', graphConfig.forceY.y, 0, 1, 'The Y location that the force will push the nodes to (NOTE: This demo multiplies by the svg height).') }}
                    </article>

                    <article>
                        {{ formHead('center', false, 'Shifts the view, so the graph is centered at this location.') }}

                        {{ inputRange('x', 'center.x', graphConfig.center.x, 0, 1, '') }}
                        {{ inputRange('y', 'center.y', graphConfig.center.y, 0, 1, '') }}
                    </article>
                </details>
            </section>
        </aside>

        <main id="record-container" class="fiche-container">
            <button class="fiche__btn-close" onclick="closeRecord()">Fermer</button>

            {% for record in index %}
            <article id="{{ record.id }}" class="fiche">
                <header>
                    <h1>{{ record.title | capitalize }}</h1>

                    <div>
                        <span>id :</span>
                        <span>{{ record.id }}</span>
                    </div>

                    <div style="display:none;">
                        <span>dernière édition :</span>
                        <time class="fiche-date" datetime="{{ record.mtime }}">{{ record.mtime }}</time>
                    </div>

                    <div>
                        <span>type :</span>
                        <span>{{ record.type | capitalize }}</span>
                    </div>

                    {% if record.tags %}
                    <div>
                        <span>mots-clés :</span>
                        <span>{{ record.tags }}</span>
                    </div>
                    {% endif %}

                    {% if record.radius.length !== 0 %}
                    <div title="Choisir le rayon du mode focus">
                        <span>mode focus :</span>
                        <span>
                            {% for niv in record.radius %}
                            <button id="{{ record.id }}-{{ loop.index }}"
                            class="radius-btn"
                            onclick="isolate([{{niv}}]);view.isolateId='{{ record.id }}-{{ loop.index }}'">{{ loop.index }}</button>
                            {% endfor %}
                        </span>
                    </div>
                    {% endif %}
                </header>

                <main>{{ record.content | safe }}</main>

                <footer>
                    {% if record.links.length !== 0 %}
                    <section>
                        <details open="open">
                            <summary class="menu-title">Liens ({{ record.links | length }})</summary>

                            <ul>
                                {% for link in record.links %}
                                <li title="{{ link.aimName }}"
                                onclick="openRecord({{ link.aim }})">{{ link.aimName }}</li>
                                {% endfor %}
                            </ul>
                        </details>
                    </section>
                    {% endif %}

                    {% if record.backlinks.length !== 0 %}
                    <section>
                        <details open="open">
                            <summary class="menu-title">Rétroliens ({{ record.backlinks | length }})</summary>

                            <ul>
                                {% for backlink in record.backlinks %}
                                <li title="{{ link.aimName }}"
                                onclick="openRecord({{ backlink.aim }})">{{ backlink.aimName }}</li>
                                {% endfor %}
                            </ul>
                        </details>
                    </section>
                    {% endif %}
                </footer>
            </article>
            {% endfor %}

            <article id="credits" class="fiche">
                <main>
                    <h1>Crédits</h1>
                    <p>Cosma est un logiciel de création et de visualisation de graphe documentaire.
                        Il a été développé dans le cadre du projet ANR <a href="https://hyperotlet.hypotheses.org/">HyperOtlet</a>
                        et conçu par Arthur Perret, Guillaume Brioudes, Olivier Le Deuff et Clément Borel.</p>

                    <h2>Bibliothèques</h2>
                    <p>Le fonctionnement de Cosma repose sur les logiciels suivants :</p>
                    <ul>
                        <li>
                            <strong><a href="https://github.com/d3/d3" target="_blank">D3</a></strong>
                            (Mike Bostock, BSD 3-Clause) : graphe intéractif
                        </li>
                        <li>
                            <strong><a href="https://github.com/mozilla/nunjucks" target="_blank">Nunjucks</a></strong>
                            (James Long, BSD 2-Clause) : intégration de l'interface
                        </li>
                        <li>
                            <strong><a href="https://github.com/markdown-it/markdown-it" target="_blank">Markdown it</a></strong>
                            (Vitaly Puzrin, Alex Kocharin, MIT License) : sérialisation des fiches
                        </li>
                        <li>
                            <strong><a href="https://github.com/krisk/fuse" target="_blank">FuseJs</a></strong>
                            (Kiro Risk, Apache License 2.0) : moteur de recherche
                        </li>
                        <li>
                            <strong><a href="https://github.com/ParkSB/markdown-it-front-matter" target="_blank">YAML Front Matter</a></strong>
                            (ParkSB, MIT License) : lecture des métadonnées
                        </li>
                        <li>
                            <strong><a href="https://github.com/moment/moment" target="_blank">MomentJs</a></strong>
                            (Iskren Ivov Chernev, MIT License) : conversion des dates
                        </li>
                    </ul>
                </main>
            </article>
        </main>
    </div>

    <div class="graph-wrapper">
        <svg id="graph_canvas">
            <defs>
                <marker id="arrow" viewBox="0 0 10 10" refX="22" refY="5" markerUnits="strokeWidth" markerWidth="7" markerHeight="7" orient="auto">
                    <path d="M 0 0 L 10 5 L 0 10 z"></path>
                </marker>
                <filter id="double">
                    <feMorphology in="SourceGraphic" result="a" operator="dilate" radius="0.2"></feMorphology>
                    <feComposite in="SourceGraphic" in2="a" result="xx" operator="xor"></feComposite>
                </filter>
            </defs>
        </svg>

        <div class="zoom-controls">
            <div>
                <button onclick="zoomLess()">-</button>
                <button onclick="zoomMore()">+</button>
            </div>
            <button onclick="zoomReset()">Recentrer</button>
            <button id="reset-nodes" onclick="resetNodes()">Réafficher</button>
        </div>
    </div>

    <script>
        {% include "graph-data.js" %}
        {% include "scripts/main.js" %}
        {% include "scripts/graph.js" %}
        {% include "scripts/zoom.js" %}
        {% include "scripts/search.js" %}
        {% include "scripts/filter.js" %}
        {% include "scripts/nodes.js" %}
        {% include "scripts/record.js" %}
        {% include "scripts/view.js" %}
    </script>
</body>

</html>