doctype html

html(lang='fr')
    head
        meta(charset='utf-8')
        meta(name='generator', content='Cosma 1.0')
        meta(name='description', content='Cosma est un logiciel de création et de visualisation de graphe documentaire. Il permet de générer et représenter des documents interreliés sous la forme d’un réseau interactif dans un navigateur web.')

        title Cosma - Cosmoscope

        style
            include colors.css
            include styles.css

        script
            include libs/d3.js
            include libs/fuse.js

    body
        main(class='interface')
        
            div(class='index')

                include cosmalogo.svg

                div(class='alpha_bar', onclick='updateForces()')
                    div(id='alpha_value')

                input(class='search-bar',id='search',placeholder='Rechercher...',autocomplete='off')
                ul(id='search-result-list')

                section
                    details(open)
                        summary Filtres (#{types.length})
                        ul
                            each typ in types
                                li(class='filter t_' + typ.name,
                                    data-filter=typ.nodes.join(','),
                                    data-name=typ.name) #{typ.name} (#{typ.nodes.length})

                section
                    details
                        summary Tags (#{tags.length})

                        ul
                            each tag in tags
                                li(class='tag'
                                    ,data-tag=tag.nodes.join(',')) #{tag.name} (#{tag.nodes.length})

                section
                    details
                        summary Index (#{index.length})

                        div(id='sort-box')
                            button(data-sort='record-list-alphabetic') A-Z
                            button(data-sort='record-list-alphabetic-reverse') Z-A
                            button(data-sort='record-list-bytime') time
                            button(data-sort='record-list-bytime-reverse') rtime

                        include records-list.pug

                section(class='controls')
                    details
                        summary Paramètres du graphe

                        include graph-controls.pug

                section
                    div
                        button(onclick='resetNodes()') Reset
                    div
                        button(onclick='saveView()') Sauvegarder la vue

                    if views.length !== 0
                        div
                            each viewString, viewName in views
                                button(onclick='changeView("' + viewString + '")') #{viewName}

                div(class='zoom-controls')
                    button(onclick='zoomMore()') +
                    button(onclick='zoomLess()') -
                    button(onclick='zoomReset()') O

            section(class='fiche-content',id='record-container')

                button(
                    class='fiche__btn-close',
                    onclick='closeRecord()') Fermer
            
                each record in index
                    aside(class='fiche', id=record.id)
                        div(class='metas')
                            h1 #{record.title}
                            time(class='fiche-date', datetime=record.mtime) #{record.mtime}
                            span(class='fiche-type') #{record.type}
                            span(class='fiche-tags') #{record.tags}
                            span(class='fiche-id') #{record.id}
                        hr

                        div !{record.content}

                        if record.radius.length !== 0
                            h2 Graphe
                            each niv, i in record.radius
                                - var nivId = record.id + '-' + (i + 1)
                                button(id=nivId,class='radius-btn',onclick='isolate([' + niv + ']);view.isolateId="' + nivId + '"') #{i + 1}

                        if record.links.length !== 0
                            h2 Liens
                            ul
                                each link in record.links
                                    li(class='id-link l_' + link.type,title=link.aimName,onclick='openRecord(' + link.aim + ')') #{link.aimName}

                        if record.backlinks.length !== 0
                            h2 Rétroliens
                            ul
                                each backlink in record.backlinks
                                    li(class='id-link l_' + backlink.type,title=backlink.aimName,onclick='openRecord(' + backlink.aim + ')') #{backlink.aimName}

        svg(id='graph_canvas')

        script
            include graph-data.js
            include scripts/main.js
            include scripts/graph.js
            include scripts/zoom.js
            include scripts/search.js
            include scripts/filter.js
            include scripts/tag.js
            include scripts/nodes.js
            include scripts/record.js
            include scripts/view.js